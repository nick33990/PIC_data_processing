import os
import h5py
import numpy as np

"""
This file oriented to work with output from PIConGPU library
https://github.com/ComputationalRadiationPhysics/picongpu
"""

def get_grid_steps(m, multiplier = 1e6):
	"""
	Reads spatial grid steps from h5py.AttributeManager

	Parameters
	----------
	m - AttributeManager
	mutliplier - conversion from m to another unit (default - to um)

	Returns
	----------
	grid steps
	"""
	ul = m['unit_length']
	dx, dy, dz = [m[attr] * ul * multiplier for attr in ['cell_width', 'cell_height', 'cell_depth']]
	return dx, dy, dz


def read_positions(f, species, two_dim = True):		
	"""
	reads positions of particles of species from picongpu hdf5 file

	Parameters
	----------
	f - h5py file object
	species - title of species
	two-dim - if calculation was two dimensional

	Returns
	----------
	arrays of particle positions
	"""
	x = np.array(f['particles'][species]['position']['x'])
	Dx = np.array(f['particles'][species]['positionOffset']['x'])

	y = np.array(f['particles'][species]['position']['y'])
	Dy = np.array(f['particles'][species]['positionOffset']['y'])

	if not two_dim:
		z = np.array(['particles'][species]['position']['z'])
		Dz=np.array(f['data'][str(time_step)]['particles'][species]['positionOffset']['z'])
	
		return (x + Dx), (y + Dy), (z + Dz)
	else:
		return (x + Dx), (y + Dy)


def density_from_fields(f, species = 'e', uc = -1.6e-19):

	"""
	reads species density if it was written in fields dataset

	Parameters
	----------
	f - h5py file object
	species - title of species
	uc - unit charge of species

	Returns
	----------
	density in 1 / m^3 (SI units)
	"""
	dens = np.array(f['fields'][species + '_all_chargeDensity'])
	unit_si_dens = h5py.AttributeManager(f['fields'][species + '_all_chargeDensity'])['unitSI']
	return dens * unit_si_dens / uc 


# 2D



def read_probe_field(f, field, axis, ii, jj, kk = None, species = 'p'):
	"""
	retrieves field map from probe particles

	Parameters
	----------
	f - h5py file object
	field - field to plot(E or B)
	axis - component of field to read (0 - x, 1 - y, 2 - z)
	ii, jj, kk - positions for probe particles
	species - name of probe particles

	Returns
	----------
	field in SI units (E/m for electric or Tl for magnetic)
	"""
	F_flat = np.array(['particles'][species]['probe' + field][axis])
	F_unit_si = h5py.AttributeManager(f['particles'][species]['probe' + field][axis])['unitSI']

	two_dim = (kk is None)

	nx = len(np.unique(ii))
	ny = len(np.unique(jj))
	if two_dim:
		shape = (nx, ny)
	else:
		nz = len(np.unique(kk))
		shape = (nx, ny, nz)

	F = np.zeros(shape, dtype = 'float32')
	if two_dim:
		for i in range(len(F_flat)):
			F[ii[i], jj[i]] = F_flat[i]
	else:
		for i in range(len(F_flat)):
			F[ii[i], jj[i], kk[i]] = F_flat[i]
	return F * F_unit_si


def read_field(f, field, axis):
	"""
	reads field from picongpu hdf5 file

	Parameters
	----------
	f - h5py file object
	field - field to plot (E, B or charge density)
	axis - component of field to read (0 - x, 1 - y, 2 - z)

	Returns
	----------
	field in SI units
	"""
	F_unit_si = h5py.AttributeManager(f['fields'][field][axis])['unitSI']
	F = f['fields'][field][axis]
	return	 F_unit_si * F


def proj(s, n):
	return float(s[1:-1].split(',')[n])

projv = np.vectorize(proj)

def load_line(filename, axes, dtype = 'float32'):
	"""
	reads one file generated by PIConGPU slice printer plugin

	Parameters
	----------
	filename - path to file, where one slice was dumped by slice printer plugin
	axes - axes of field vector to load (x-0, y-1, z-2)
	dtype - dtype to load data in

	Returns
	----------
	values from line
	----------
	"""
	with open(filename, 'r') as f:
		line = next(iter(f))
		line = line.split(' ')[:-1]
		line = [projv(np.array(line) , axis).astype(dtype) for axis in axes]
		return line


def load_xt_map(path, axes, step = 2, dtype = 'float32'):
	"""
	loads xt map from directory, where PIConGPU slice printer plugin dumped data

	Parameters
	----------
	path - path to directory, whrer slice printer dumped results
	axes -  axes of field vector to load (x-0, y-1, z-2)
	step - step to iterate through file list
	dtype - dtype to load data

	Returns
	----------
	xt-map(s), recorded in directory
	"""
	if type(axes) == int:
		axes = [axes]
	files = sorted(os.listdir(path), key = lambda s : int(s[6:-4]))
	files = files[::step]
	lines0 = load_line(join(path, files[0]), axes, dtype = dtype)
	Ny, Nt = len(lines0[0]), len(files)
	F = [np.zeros((Nt, Ny), dtype = dtype) for _ in axes]
	for i in range(len(axes)):
		F[i][0, :] = lines0[i]
	for j, file in tqdm(enumerate(files[1:])):
		lines0 = load_line(join(path, file), axes = axes, dtype = dtype)
		for i in range(len(axes)):
			F[i][j, :] = lines0[i]
	return F